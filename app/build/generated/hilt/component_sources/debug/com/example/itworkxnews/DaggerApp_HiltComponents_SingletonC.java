// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.itworkxnews.data.db.AppDatabase;
import com.example.itworkxnews.data.db.ArticleDAO;
import com.example.itworkxnews.data.local.cache.CacheManager;
import com.example.itworkxnews.data.local.data_source.NewsLocalDataSource;
import com.example.itworkxnews.data.remote.api.NewsAPIService;
import com.example.itworkxnews.data.remote.data_source.NewsRemoteDataSource;
import com.example.itworkxnews.di.AdapterModule;
import com.example.itworkxnews.di.AdapterModule_ProvideBookmarksRecyclerViewAdapterFactory;
import com.example.itworkxnews.di.AdapterModule_ProvideLastSearchRecyclerViewAdapterFactory;
import com.example.itworkxnews.di.AdapterModule_ProvideNewsPagingDataAdapterFactory;
import com.example.itworkxnews.di.AdapterModule_ProvideNewsRecyclerViewAdapterFactory;
import com.example.itworkxnews.di.DatabaseModule;
import com.example.itworkxnews.di.DatabaseModule_ProvideAppDatabaseFactory;
import com.example.itworkxnews.di.DatabaseModule_ProvideArticleDAOFactory;
import com.example.itworkxnews.di.LocaleDataModule;
import com.example.itworkxnews.di.LocaleDataModule_ProvideCacheManagerFactory;
import com.example.itworkxnews.di.LocaleDataModule_ProvideLocaleDataSourceFactory;
import com.example.itworkxnews.di.NetworkModule;
import com.example.itworkxnews.di.NetworkModule_ProvideNewsAPIServiceFactory;
import com.example.itworkxnews.di.NetworkModule_ProvideOkHttpClientFactory;
import com.example.itworkxnews.di.NetworkModule_ProvideRetrofitFactory;
import com.example.itworkxnews.di.RemoteDataModule;
import com.example.itworkxnews.di.RemoteDataModule_ProvideNewsRemoteDataSourceFactory;
import com.example.itworkxnews.di.RepositoryModule;
import com.example.itworkxnews.di.RepositoryModule_ProvideNewsRepositoryFactory;
import com.example.itworkxnews.di.UseCaseModule;
import com.example.itworkxnews.di.UseCaseModule_ProvideNewsUseCasesFactory;
import com.example.itworkxnews.di.UseCaseModule_ProvideSearchHistoryUseCaseFactory;
import com.example.itworkxnews.domain.reposityory.NewsRepository;
import com.example.itworkxnews.domain.usecase.NewsUseCases;
import com.example.itworkxnews.domain.usecase.SearchHistoryUseCase;
import com.example.itworkxnews.presentation.adapters.BookmarksRecyclerViewAdapter;
import com.example.itworkxnews.presentation.adapters.LastSearchRecyclerViewAdapter;
import com.example.itworkxnews.presentation.adapters.NewsPagingDataAdapter;
import com.example.itworkxnews.presentation.adapters.NewsRecyclerViewAdapter;
import com.example.itworkxnews.presentation.viewmodels.BookmarksViewModel;
import com.example.itworkxnews.presentation.viewmodels.BookmarksViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.itworkxnews.presentation.viewmodels.MainViewModel;
import com.example.itworkxnews.presentation.viewmodels.MainViewModel_Factory;
import com.example.itworkxnews.presentation.viewmodels.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.itworkxnews.presentation.viewmodels.MainViewModel_MembersInjector;
import com.example.itworkxnews.presentation.viewmodels.NewDetailViewModel;
import com.example.itworkxnews.presentation.viewmodels.NewDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.itworkxnews.presentation.viewmodels.NewsViewModel;
import com.example.itworkxnews.presentation.viewmodels.NewsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.itworkxnews.presentation.viewmodels.SearchViewModel;
import com.example.itworkxnews.presentation.viewmodels.SearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.itworkxnews.presentation.views.MainActivity;
import com.example.itworkxnews.presentation.views.bookmarks.BookmarksFragment;
import com.example.itworkxnews.presentation.views.bookmarks.BookmarksFragment_MembersInjector;
import com.example.itworkxnews.presentation.views.new_details.NewDetailFragment;
import com.example.itworkxnews.presentation.views.news.NewsFragment;
import com.example.itworkxnews.presentation.views.news.NewsFragment_MembersInjector;
import com.example.itworkxnews.presentation.views.search.SearchFragment;
import com.example.itworkxnews.presentation.views.search.SearchFragment_MembersInjector;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AdapterModule adapterModule;

    private ApplicationContextModule applicationContextModule;

    private DatabaseModule databaseModule;

    private LocaleDataModule localeDataModule;

    private NetworkModule networkModule;

    private RemoteDataModule remoteDataModule;

    private RepositoryModule repositoryModule;

    private UseCaseModule useCaseModule;

    private Builder() {
    }

    public Builder adapterModule(AdapterModule adapterModule) {
      this.adapterModule = Preconditions.checkNotNull(adapterModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder localeDataModule(LocaleDataModule localeDataModule) {
      this.localeDataModule = Preconditions.checkNotNull(localeDataModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder remoteDataModule(RemoteDataModule remoteDataModule) {
      this.remoteDataModule = Preconditions.checkNotNull(remoteDataModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      if (adapterModule == null) {
        this.adapterModule = new AdapterModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (localeDataModule == null) {
        this.localeDataModule = new LocaleDataModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (remoteDataModule == null) {
        this.remoteDataModule = new RemoteDataModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      return new SingletonCImpl(adapterModule, applicationContextModule, databaseModule, localeDataModule, networkModule, remoteDataModule, repositoryModule, useCaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectBookmarksFragment(BookmarksFragment bookmarksFragment) {
      injectBookmarksFragment2(bookmarksFragment);
    }

    @Override
    public void injectNewDetailFragment(NewDetailFragment newDetailFragment) {
    }

    @Override
    public void injectNewsFragment(NewsFragment newsFragment) {
      injectNewsFragment2(newsFragment);
    }

    @Override
    public void injectSearchFragment(SearchFragment searchFragment) {
      injectSearchFragment2(searchFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @CanIgnoreReturnValue
    private BookmarksFragment injectBookmarksFragment2(BookmarksFragment instance) {
      BookmarksFragment_MembersInjector.injectBookmarksRecyclerViewAdapter(instance, singletonCImpl.provideBookmarksRecyclerViewAdapterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private NewsFragment injectNewsFragment2(NewsFragment instance) {
      NewsFragment_MembersInjector.injectNewsPagingDataAdapter(instance, singletonCImpl.provideNewsPagingDataAdapterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SearchFragment injectSearchFragment2(SearchFragment instance) {
      SearchFragment_MembersInjector.injectNewsRecyclerViewAdapter(instance, singletonCImpl.provideNewsRecyclerViewAdapterProvider.get());
      SearchFragment_MembersInjector.injectLastSearchRecyclerViewAdapter(instance, singletonCImpl.provideLastSearchRecyclerViewAdapterProvider.get());
      SearchFragment_MembersInjector.injectBookmarksRecyclerViewAdapter(instance, singletonCImpl.provideBookmarksRecyclerViewAdapterProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(5).add(BookmarksViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NewDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NewsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<BookmarksViewModel> bookmarksViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<NewDetailViewModel> newDetailViewModelProvider;

    private Provider<NewsViewModel> newsViewModelProvider;

    private Provider<SearchViewModel> searchViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.bookmarksViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.newDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.newsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.searchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.example.itworkxnews.presentation.viewmodels.BookmarksViewModel", ((Provider) bookmarksViewModelProvider)).put("com.example.itworkxnews.presentation.viewmodels.MainViewModel", ((Provider) mainViewModelProvider)).put("com.example.itworkxnews.presentation.viewmodels.NewDetailViewModel", ((Provider) newDetailViewModelProvider)).put("com.example.itworkxnews.presentation.viewmodels.NewsViewModel", ((Provider) newsViewModelProvider)).put("com.example.itworkxnews.presentation.viewmodels.SearchViewModel", ((Provider) searchViewModelProvider)).build();
    }

    @CanIgnoreReturnValue
    private MainViewModel injectMainViewModel(MainViewModel instance) {
      MainViewModel_MembersInjector.injectBookmarksRecyclerViewAdapter(instance, singletonCImpl.provideBookmarksRecyclerViewAdapterProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.itworkxnews.presentation.viewmodels.BookmarksViewModel 
          return (T) new BookmarksViewModel(singletonCImpl.provideNewsUseCasesProvider.get());

          case 1: // com.example.itworkxnews.presentation.viewmodels.MainViewModel 
          return (T) viewModelCImpl.injectMainViewModel(MainViewModel_Factory.newInstance(singletonCImpl.provideNewsUseCasesProvider.get()));

          case 2: // com.example.itworkxnews.presentation.viewmodels.NewDetailViewModel 
          return (T) new NewDetailViewModel(singletonCImpl.provideNewsUseCasesProvider.get());

          case 3: // com.example.itworkxnews.presentation.viewmodels.NewsViewModel 
          return (T) new NewsViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), singletonCImpl.provideNewsUseCasesProvider.get());

          case 4: // com.example.itworkxnews.presentation.viewmodels.SearchViewModel 
          return (T) new SearchViewModel(singletonCImpl.provideSearchHistoryUseCaseProvider.get(), singletonCImpl.provideNewsUseCasesProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final AdapterModule adapterModule;

    private final UseCaseModule useCaseModule;

    private final RepositoryModule repositoryModule;

    private final RemoteDataModule remoteDataModule;

    private final NetworkModule networkModule;

    private final LocaleDataModule localeDataModule;

    private final DatabaseModule databaseModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<BookmarksRecyclerViewAdapter> provideBookmarksRecyclerViewAdapterProvider;

    private Provider<NewsPagingDataAdapter> provideNewsPagingDataAdapterProvider;

    private Provider<NewsRecyclerViewAdapter> provideNewsRecyclerViewAdapterProvider;

    private Provider<LastSearchRecyclerViewAdapter> provideLastSearchRecyclerViewAdapterProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<NewsAPIService> provideNewsAPIServiceProvider;

    private Provider<NewsRemoteDataSource> provideNewsRemoteDataSourceProvider;

    private Provider<AppDatabase> provideAppDatabaseProvider;

    private Provider<ArticleDAO> provideArticleDAOProvider;

    private Provider<NewsLocalDataSource> provideLocaleDataSourceProvider;

    private Provider<CacheManager> provideCacheManagerProvider;

    private Provider<NewsRepository> provideNewsRepositoryProvider;

    private Provider<NewsUseCases> provideNewsUseCasesProvider;

    private Provider<SearchHistoryUseCase> provideSearchHistoryUseCaseProvider;

    private SingletonCImpl(AdapterModule adapterModuleParam,
        ApplicationContextModule applicationContextModuleParam, DatabaseModule databaseModuleParam,
        LocaleDataModule localeDataModuleParam, NetworkModule networkModuleParam,
        RemoteDataModule remoteDataModuleParam, RepositoryModule repositoryModuleParam,
        UseCaseModule useCaseModuleParam) {
      this.adapterModule = adapterModuleParam;
      this.useCaseModule = useCaseModuleParam;
      this.repositoryModule = repositoryModuleParam;
      this.remoteDataModule = remoteDataModuleParam;
      this.networkModule = networkModuleParam;
      this.localeDataModule = localeDataModuleParam;
      this.databaseModule = databaseModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(adapterModuleParam, applicationContextModuleParam, databaseModuleParam, localeDataModuleParam, networkModuleParam, remoteDataModuleParam, repositoryModuleParam, useCaseModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AdapterModule adapterModuleParam,
        final ApplicationContextModule applicationContextModuleParam,
        final DatabaseModule databaseModuleParam, final LocaleDataModule localeDataModuleParam,
        final NetworkModule networkModuleParam, final RemoteDataModule remoteDataModuleParam,
        final RepositoryModule repositoryModuleParam, final UseCaseModule useCaseModuleParam) {
      this.provideBookmarksRecyclerViewAdapterProvider = DoubleCheck.provider(new SwitchingProvider<BookmarksRecyclerViewAdapter>(singletonCImpl, 0));
      this.provideNewsPagingDataAdapterProvider = DoubleCheck.provider(new SwitchingProvider<NewsPagingDataAdapter>(singletonCImpl, 1));
      this.provideNewsRecyclerViewAdapterProvider = DoubleCheck.provider(new SwitchingProvider<NewsRecyclerViewAdapter>(singletonCImpl, 2));
      this.provideLastSearchRecyclerViewAdapterProvider = DoubleCheck.provider(new SwitchingProvider<LastSearchRecyclerViewAdapter>(singletonCImpl, 3));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 9));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 8));
      this.provideNewsAPIServiceProvider = DoubleCheck.provider(new SwitchingProvider<NewsAPIService>(singletonCImpl, 7));
      this.provideNewsRemoteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<NewsRemoteDataSource>(singletonCImpl, 6));
      this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 12));
      this.provideArticleDAOProvider = DoubleCheck.provider(new SwitchingProvider<ArticleDAO>(singletonCImpl, 11));
      this.provideLocaleDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<NewsLocalDataSource>(singletonCImpl, 10));
      this.provideCacheManagerProvider = DoubleCheck.provider(new SwitchingProvider<CacheManager>(singletonCImpl, 13));
      this.provideNewsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<NewsRepository>(singletonCImpl, 5));
      this.provideNewsUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<NewsUseCases>(singletonCImpl, 4));
      this.provideSearchHistoryUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<SearchHistoryUseCase>(singletonCImpl, 14));
    }

    @Override
    public void injectApp(App app) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.itworkxnews.presentation.adapters.BookmarksRecyclerViewAdapter 
          return (T) AdapterModule_ProvideBookmarksRecyclerViewAdapterFactory.provideBookmarksRecyclerViewAdapter(singletonCImpl.adapterModule);

          case 1: // com.example.itworkxnews.presentation.adapters.NewsPagingDataAdapter 
          return (T) AdapterModule_ProvideNewsPagingDataAdapterFactory.provideNewsPagingDataAdapter(singletonCImpl.adapterModule);

          case 2: // com.example.itworkxnews.presentation.adapters.NewsRecyclerViewAdapter 
          return (T) AdapterModule_ProvideNewsRecyclerViewAdapterFactory.provideNewsRecyclerViewAdapter(singletonCImpl.adapterModule);

          case 3: // com.example.itworkxnews.presentation.adapters.LastSearchRecyclerViewAdapter 
          return (T) AdapterModule_ProvideLastSearchRecyclerViewAdapterFactory.provideLastSearchRecyclerViewAdapter(singletonCImpl.adapterModule);

          case 4: // com.example.itworkxnews.domain.usecase.NewsUseCases 
          return (T) UseCaseModule_ProvideNewsUseCasesFactory.provideNewsUseCases(singletonCImpl.useCaseModule, singletonCImpl.provideNewsRepositoryProvider.get());

          case 5: // com.example.itworkxnews.domain.reposityory.NewsRepository 
          return (T) RepositoryModule_ProvideNewsRepositoryFactory.provideNewsRepository(singletonCImpl.repositoryModule, singletonCImpl.provideNewsRemoteDataSourceProvider.get(), singletonCImpl.provideLocaleDataSourceProvider.get(), singletonCImpl.provideCacheManagerProvider.get());

          case 6: // com.example.itworkxnews.data.remote.data_source.NewsRemoteDataSource 
          return (T) RemoteDataModule_ProvideNewsRemoteDataSourceFactory.provideNewsRemoteDataSource(singletonCImpl.remoteDataModule, singletonCImpl.provideNewsAPIServiceProvider.get());

          case 7: // com.example.itworkxnews.data.remote.api.NewsAPIService 
          return (T) NetworkModule_ProvideNewsAPIServiceFactory.provideNewsAPIService(singletonCImpl.networkModule, singletonCImpl.provideRetrofitProvider.get());

          case 8: // retrofit2.Retrofit 
          return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.networkModule, singletonCImpl.provideOkHttpClientProvider.get());

          case 9: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonCImpl.networkModule);

          case 10: // com.example.itworkxnews.data.local.data_source.NewsLocalDataSource 
          return (T) LocaleDataModule_ProvideLocaleDataSourceFactory.provideLocaleDataSource(singletonCImpl.localeDataModule, singletonCImpl.provideArticleDAOProvider.get());

          case 11: // com.example.itworkxnews.data.db.ArticleDAO 
          return (T) DatabaseModule_ProvideArticleDAOFactory.provideArticleDAO(singletonCImpl.databaseModule, singletonCImpl.provideAppDatabaseProvider.get());

          case 12: // com.example.itworkxnews.data.db.AppDatabase 
          return (T) DatabaseModule_ProvideAppDatabaseFactory.provideAppDatabase(singletonCImpl.databaseModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 13: // com.example.itworkxnews.data.local.cache.CacheManager 
          return (T) LocaleDataModule_ProvideCacheManagerFactory.provideCacheManager(singletonCImpl.localeDataModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 14: // com.example.itworkxnews.domain.usecase.SearchHistoryUseCase 
          return (T) UseCaseModule_ProvideSearchHistoryUseCaseFactory.provideSearchHistoryUseCase(singletonCImpl.useCaseModule, singletonCImpl.provideNewsRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
