// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.presentation.viewmodels;

import android.app.Application;
import com.example.itworkxnews.domain.usecase.NewsUseCases;
import com.example.itworkxnews.domain.usecase.SearchHistoryUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SearchViewModel_Factory implements Factory<SearchViewModel> {
  private final Provider<SearchHistoryUseCase> searchHistoryUseCaseProvider;

  private final Provider<NewsUseCases> newsUseCasesProvider;

  private final Provider<Application> appProvider;

  public SearchViewModel_Factory(Provider<SearchHistoryUseCase> searchHistoryUseCaseProvider,
      Provider<NewsUseCases> newsUseCasesProvider, Provider<Application> appProvider) {
    this.searchHistoryUseCaseProvider = searchHistoryUseCaseProvider;
    this.newsUseCasesProvider = newsUseCasesProvider;
    this.appProvider = appProvider;
  }

  @Override
  public SearchViewModel get() {
    return newInstance(searchHistoryUseCaseProvider.get(), newsUseCasesProvider.get(), appProvider.get());
  }

  public static SearchViewModel_Factory create(
      Provider<SearchHistoryUseCase> searchHistoryUseCaseProvider,
      Provider<NewsUseCases> newsUseCasesProvider, Provider<Application> appProvider) {
    return new SearchViewModel_Factory(searchHistoryUseCaseProvider, newsUseCasesProvider, appProvider);
  }

  public static SearchViewModel newInstance(SearchHistoryUseCase searchHistoryUseCase,
      NewsUseCases newsUseCases, Application app) {
    return new SearchViewModel(searchHistoryUseCase, newsUseCases, app);
  }
}
