// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.presentation.adapters;

import com.example.itworkxnews.domain.usecase.NewsUseCases;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NewsRecyclerViewAdapter_ViewHolder_MembersInjector implements MembersInjector<NewsRecyclerViewAdapter.ViewHolder> {
  private final Provider<NewsUseCases> newsUseCasesProvider;

  public NewsRecyclerViewAdapter_ViewHolder_MembersInjector(
      Provider<NewsUseCases> newsUseCasesProvider) {
    this.newsUseCasesProvider = newsUseCasesProvider;
  }

  public static MembersInjector<NewsRecyclerViewAdapter.ViewHolder> create(
      Provider<NewsUseCases> newsUseCasesProvider) {
    return new NewsRecyclerViewAdapter_ViewHolder_MembersInjector(newsUseCasesProvider);
  }

  @Override
  public void injectMembers(NewsRecyclerViewAdapter.ViewHolder instance) {
    injectNewsUseCases(instance, newsUseCasesProvider.get());
  }

  @InjectedFieldSignature("com.example.itworkxnews.presentation.adapters.NewsRecyclerViewAdapter.ViewHolder.newsUseCases")
  public static void injectNewsUseCases(NewsRecyclerViewAdapter.ViewHolder instance,
      NewsUseCases newsUseCases) {
    instance.newsUseCases = newsUseCases;
  }
}
