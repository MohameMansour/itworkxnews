// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.di;

import com.example.itworkxnews.domain.reposityory.NewsRepository;
import com.example.itworkxnews.domain.usecase.NewsUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideNewsUseCasesFactory implements Factory<NewsUseCases> {
  private final UseCaseModule module;

  private final Provider<NewsRepository> nasaRepositoryProvider;

  public UseCaseModule_ProvideNewsUseCasesFactory(UseCaseModule module,
      Provider<NewsRepository> nasaRepositoryProvider) {
    this.module = module;
    this.nasaRepositoryProvider = nasaRepositoryProvider;
  }

  @Override
  public NewsUseCases get() {
    return provideNewsUseCases(module, nasaRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideNewsUseCasesFactory create(UseCaseModule module,
      Provider<NewsRepository> nasaRepositoryProvider) {
    return new UseCaseModule_ProvideNewsUseCasesFactory(module, nasaRepositoryProvider);
  }

  public static NewsUseCases provideNewsUseCases(UseCaseModule instance,
      NewsRepository nasaRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsUseCases(nasaRepository));
  }
}
