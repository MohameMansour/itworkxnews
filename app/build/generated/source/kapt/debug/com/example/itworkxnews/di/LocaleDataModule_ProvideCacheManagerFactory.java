// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.di;

import android.app.Application;
import com.example.itworkxnews.data.local.cache.CacheManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LocaleDataModule_ProvideCacheManagerFactory implements Factory<CacheManager> {
  private final LocaleDataModule module;

  private final Provider<Application> applicationProvider;

  public LocaleDataModule_ProvideCacheManagerFactory(LocaleDataModule module,
      Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public CacheManager get() {
    return provideCacheManager(module, applicationProvider.get());
  }

  public static LocaleDataModule_ProvideCacheManagerFactory create(LocaleDataModule module,
      Provider<Application> applicationProvider) {
    return new LocaleDataModule_ProvideCacheManagerFactory(module, applicationProvider);
  }

  public static CacheManager provideCacheManager(LocaleDataModule instance,
      Application application) {
    return Preconditions.checkNotNullFromProvides(instance.provideCacheManager(application));
  }
}
