// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.di;

import com.example.itworkxnews.data.local.cache.CacheManager;
import com.example.itworkxnews.data.local.data_source.NewsLocalDataSource;
import com.example.itworkxnews.data.remote.data_source.NewsRemoteDataSource;
import com.example.itworkxnews.domain.reposityory.NewsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepositoryModule_ProvideNewsRepositoryFactory implements Factory<NewsRepository> {
  private final RepositoryModule module;

  private final Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider;

  private final Provider<NewsLocalDataSource> newsLocalDataSourceProvider;

  private final Provider<CacheManager> cacheManagerProvider;

  public RepositoryModule_ProvideNewsRepositoryFactory(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider,
      Provider<NewsLocalDataSource> newsLocalDataSourceProvider,
      Provider<CacheManager> cacheManagerProvider) {
    this.module = module;
    this.newsRemoteDataSourceProvider = newsRemoteDataSourceProvider;
    this.newsLocalDataSourceProvider = newsLocalDataSourceProvider;
    this.cacheManagerProvider = cacheManagerProvider;
  }

  @Override
  public NewsRepository get() {
    return provideNewsRepository(module, newsRemoteDataSourceProvider.get(), newsLocalDataSourceProvider.get(), cacheManagerProvider.get());
  }

  public static RepositoryModule_ProvideNewsRepositoryFactory create(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider,
      Provider<NewsLocalDataSource> newsLocalDataSourceProvider,
      Provider<CacheManager> cacheManagerProvider) {
    return new RepositoryModule_ProvideNewsRepositoryFactory(module, newsRemoteDataSourceProvider, newsLocalDataSourceProvider, cacheManagerProvider);
  }

  public static NewsRepository provideNewsRepository(RepositoryModule instance,
      NewsRemoteDataSource newsRemoteDataSource, NewsLocalDataSource newsLocalDataSource,
      CacheManager cacheManager) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsRepository(newsRemoteDataSource, newsLocalDataSource, cacheManager));
  }
}
