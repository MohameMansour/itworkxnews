// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.presentation.viewmodels;

import android.app.Application;
import com.example.itworkxnews.domain.usecase.NewsUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NewsViewModel_Factory implements Factory<NewsViewModel> {
  private final Provider<Application> appProvider;

  private final Provider<NewsUseCases> newsUseCasesProvider;

  public NewsViewModel_Factory(Provider<Application> appProvider,
      Provider<NewsUseCases> newsUseCasesProvider) {
    this.appProvider = appProvider;
    this.newsUseCasesProvider = newsUseCasesProvider;
  }

  @Override
  public NewsViewModel get() {
    return newInstance(appProvider.get(), newsUseCasesProvider.get());
  }

  public static NewsViewModel_Factory create(Provider<Application> appProvider,
      Provider<NewsUseCases> newsUseCasesProvider) {
    return new NewsViewModel_Factory(appProvider, newsUseCasesProvider);
  }

  public static NewsViewModel newInstance(Application app, NewsUseCases newsUseCases) {
    return new NewsViewModel(app, newsUseCases);
  }
}
