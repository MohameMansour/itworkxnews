// Generated by Dagger (https://dagger.dev).
package com.example.itworkxnews.presentation.viewmodels;

import com.example.itworkxnews.domain.usecase.NewsUseCases;
import com.example.itworkxnews.presentation.adapters.BookmarksRecyclerViewAdapter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<NewsUseCases> newsUseCasesProvider;

  private final Provider<BookmarksRecyclerViewAdapter> bookmarksRecyclerViewAdapterProvider;

  public MainViewModel_Factory(Provider<NewsUseCases> newsUseCasesProvider,
      Provider<BookmarksRecyclerViewAdapter> bookmarksRecyclerViewAdapterProvider) {
    this.newsUseCasesProvider = newsUseCasesProvider;
    this.bookmarksRecyclerViewAdapterProvider = bookmarksRecyclerViewAdapterProvider;
  }

  @Override
  public MainViewModel get() {
    MainViewModel instance = newInstance(newsUseCasesProvider.get());
    MainViewModel_MembersInjector.injectBookmarksRecyclerViewAdapter(instance, bookmarksRecyclerViewAdapterProvider.get());
    return instance;
  }

  public static MainViewModel_Factory create(Provider<NewsUseCases> newsUseCasesProvider,
      Provider<BookmarksRecyclerViewAdapter> bookmarksRecyclerViewAdapterProvider) {
    return new MainViewModel_Factory(newsUseCasesProvider, bookmarksRecyclerViewAdapterProvider);
  }

  public static MainViewModel newInstance(NewsUseCases newsUseCases) {
    return new MainViewModel(newsUseCases);
  }
}
