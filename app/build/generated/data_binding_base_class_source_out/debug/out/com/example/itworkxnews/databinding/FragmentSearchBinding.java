// Generated by view binder compiler. Do not edit!
package com.example.itworkxnews.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.example.itworkxnews.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.search.SearchBar;
import com.google.android.material.search.SearchView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final RecyclerView lastSearchRecyclerView;

  @NonNull
  public final SearchBar searchBar;

  @NonNull
  public final LottieAnimationView searchLottie;

  @NonNull
  public final MaterialToolbar searchPageToolbar;

  @NonNull
  public final RecyclerView searchRecyclerView;

  @NonNull
  public final SearchView searchView;

  private FragmentSearchBinding(@NonNull CoordinatorLayout rootView,
      @NonNull RecyclerView lastSearchRecyclerView, @NonNull SearchBar searchBar,
      @NonNull LottieAnimationView searchLottie, @NonNull MaterialToolbar searchPageToolbar,
      @NonNull RecyclerView searchRecyclerView, @NonNull SearchView searchView) {
    this.rootView = rootView;
    this.lastSearchRecyclerView = lastSearchRecyclerView;
    this.searchBar = searchBar;
    this.searchLottie = searchLottie;
    this.searchPageToolbar = searchPageToolbar;
    this.searchRecyclerView = searchRecyclerView;
    this.searchView = searchView;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.last_search_recycler_view;
      RecyclerView lastSearchRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (lastSearchRecyclerView == null) {
        break missingId;
      }

      id = R.id.search_bar;
      SearchBar searchBar = ViewBindings.findChildViewById(rootView, id);
      if (searchBar == null) {
        break missingId;
      }

      id = R.id.search_lottie;
      LottieAnimationView searchLottie = ViewBindings.findChildViewById(rootView, id);
      if (searchLottie == null) {
        break missingId;
      }

      id = R.id.search_page_toolbar;
      MaterialToolbar searchPageToolbar = ViewBindings.findChildViewById(rootView, id);
      if (searchPageToolbar == null) {
        break missingId;
      }

      id = R.id.search_recycler_view;
      RecyclerView searchRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (searchRecyclerView == null) {
        break missingId;
      }

      id = R.id.search_view;
      SearchView searchView = ViewBindings.findChildViewById(rootView, id);
      if (searchView == null) {
        break missingId;
      }

      return new FragmentSearchBinding((CoordinatorLayout) rootView, lastSearchRecyclerView,
          searchBar, searchLottie, searchPageToolbar, searchRecyclerView, searchView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
